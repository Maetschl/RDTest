//
//  HomeInteractor.swift
//  ReignDesignTestApp
//
//  Created by Juli√°n Arias on 15-09-18.
//  Copyright (c) 2018 Maetschl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates: http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func getNews()
}

protocol HomeDataStore {
    var data: [Hit]? { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    var presenter: HomePresentationLogic?
    var worker: HomeWorkerProtocol? = HomeWorker()

    // MARK: HomeDataStore
    var data: [Hit]?

    // MARK: Do something
    func getNews() {
        worker?.getDataFromApi(success: { (hackerNewsSearchResult) in
            self.data = hackerNewsSearchResult.hits
            var newsDataToPresent: [News] = []
            if let data = self.data {
                for news in data {
                    let title = news.storyTitle ?? news.title ?? ""
                    let author = news.author
                    let date = news.createdAt
                    let newNews = News(title: title, author: author, date: date)
                    newsDataToPresent.append(newNews)
                }
                self.storeData(news: newsDataToPresent)
            } else {
                self.presentStoreData()
            }
            let responseFromApi = Home.NewsList.Response(news: newsDataToPresent)
            self.presenter?.presentNews(response: responseFromApi)
        }, error: {
            self.presentStoreData()
        })
    }

    private func storeData(news data: [News]) {
        let encondedData = NSKeyedArchiver.archivedData(withRootObject: data)
        UserDefaults.standard.set(encondedData, forKey: Configurations.storeKey)
        UserDefaults.standard.synchronize()
    }

    private func presentStoreData() {
        let decodedData  = UserDefaults.standard.object(forKey: Configurations.storeKey) as! Data
        let news = NSKeyedUnarchiver.unarchiveObject(with: decodedData) as! [News]
        let responseFromSaveData = Home.NewsList.Response(news: news)
        self.presenter?.presentNews(response: responseFromSaveData)
    }
}
