//
//  HomeInteractor.swift
//  ReignDesignTestApp
//
//  Created by JuliÃ¡n Arias on 15-09-18.
//  Copyright (c) 2018 Maetschl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates: http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func getNews()
    func deleteNews(request: Home.RemoveNews.Request)
    func selectNews(request: Home.SelectNews.Request)
}

protocol HomeDataStore {
    var data: [News] { get set }
    var removedData: [News] { get set }
    var selectedNews: URL! { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {

    var presenter: HomePresentationLogic?
    var worker: HomeWorkerProtocol? = HomeWorker()

    // MARK: HomeDataStore
    var data: [News] = []
    var removedData: [News] = []
    var selectedNews: URL!

    // MARK: Get news
    func getNews() {
        worker?.getDataFromApi(success: { (hackerNewsSearchResult) in
            let result: [Hit] = hackerNewsSearchResult.hits
            var newsDataToPresent: [News] = []

            for news in result {
                let id = news.objectID
                let title = news.storyTitle ?? news.title ?? ""
                let author = news.author
                let date = news.createdAt
                let url = news.storyURL ?? Configurations.baseUrl
                let newNews = News(id: id,title: title, author: author, date: date, url: url)
                newsDataToPresent.append(newNews)
            }

            self.storeData(news: newsDataToPresent)
            self.presentData()

        }, error: {
            self.presentStoreData()
        })
    }

    // MARK: Remove news
    func deleteNews(request: Home.RemoveNews.Request) {
        removedData.append(data[request.index])
        data.remove(at: request.index)
        storeData(news: data)
        presentData()
    }

    // MARK: Select news
    func selectNews(request: Home.SelectNews.Request) {
        selectedNews = URL(string: data[request.index].url)
    }

    // MARK: Private store methods
    private func storeData(news data: [News]) {
        self.data = data
        self.data = filteredData()
        let encondedData = NSKeyedArchiver.archivedData(withRootObject: data)
        UserDefaults.standard.set(encondedData, forKey: Configurations.storeKey)
        UserDefaults.standard.synchronize()
    }

    private func presentData() {
        let response = Home.NewsList.Response(news: data)
        self.presenter?.presentNews(response: response)
    }

    // MARK: Present Store data
    private func presentStoreData() {
        let decodedData  = UserDefaults.standard.object(forKey: Configurations.storeKey) as! Data
        let news = NSKeyedUnarchiver.unarchiveObject(with: decodedData) as! [News]
        self.data = news
        let responseFromSaveData = Home.NewsList.Response(news: data)
        self.presenter?.presentNews(response: responseFromSaveData)
    }

    // MARK: Filter deleted data
    private func filteredData() -> [News] {
        let filteredNews = data.filter { (news) -> Bool in
            return notDeleted(news: news)
        }
        return filteredNews
    }
    private func notDeleted(news: News) -> Bool {
        for removedItem in removedData {
            if removedItem.id == news.id { return false }
        }
        return true
    }
}
